// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bench.proto

package gambol.examples.serialize.benchmark.protobuf.model;

/**
 * Protobuf enum {@code benchmark.Type}
 */
public enum Type
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>UNKNOWN = 0;</code>
   */
  UNKNOWN(0, 0),
  /**
   * <code>FOO = 1;</code>
   */
  FOO(1, 1),
  /**
   * <code>BAR = 2;</code>
   */
  BAR(2, 2),
  ;

  /**
   * <code>UNKNOWN = 0;</code>
   */
  public static final int UNKNOWN_VALUE = 0;
  /**
   * <code>FOO = 1;</code>
   */
  public static final int FOO_VALUE = 1;
  /**
   * <code>BAR = 2;</code>
   */
  public static final int BAR_VALUE = 2;


  public final int getNumber() { return value; }

  public static Type valueOf(int value) {
    switch (value) {
      case 0: return UNKNOWN;
      case 1: return FOO;
      case 2: return BAR;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Type>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static com.google.protobuf.Internal.EnumLiteMap<Type>
      internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Type>() {
          public Type findValueByNumber(int number) {
            return Type.valueOf(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(index);
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return Bench.getDescriptor()
        .getEnumTypes().get(0);
  }

  private static final Type[] VALUES = values();

  public static Type valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    return VALUES[desc.getIndex()];
  }

  private final int index;
  private final int value;

  private Type(int index, int value) {
    this.index = index;
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:benchmark.Type)
}

